import locale
from datetime import datetime

import telebot
from tabulate import tabulate

from config import daily_bot_token, daily_chat_id

locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
bot = telebot.TeleBot(daily_bot_token)

user_responses = {}


@bot.message_handler(commands=['start'], chat_types=['private'])
def start(message):
    user_id = message.from_user.id
    user_responses[user_id] = []
    welcome_message = '''–ü—Ä–∏–≤–µ–µ–µ–µ—Ç üëã, –Ø –ê–ª–∏—Ñ –î–µ–π–ª–∏ –ë–æ—Çüíö
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: \n'''

    bot.send_message(message.chat.id, welcome_message)
    bot.send_message(user_id, "–ß–µ–º –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –≤—á–µ—Ä–∞?")
    user_responses[user_id].append('started')


@bot.message_handler(func=lambda message: True, chat_types=['private'])
def handle_user_response(message):
    user_id = message.from_user.id
    response = message.text
    user_responses[user_id].append(response)
    current_date = datetime.now()
    formatted_date = current_date.strftime("%A, %d %B %Y")

    user_name_link = f'<b><a href="tg://user?id={user_id}">{message.from_user.first_name}</a></b>'

    if len(user_responses[user_id]) == 2 and 'started' in user_responses[user_id]:
        bot.send_message(user_id, "–ß–µ–º –±—É–¥–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?")
    elif len(user_responses[user_id]) == 3 and 'started' in user_responses[user_id]:
        bot.send_message(user_id, "–ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏?")
    elif len(user_responses[user_id]) == 4 and 'started' in user_responses[user_id]:
        bot.send_message(user_id, "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É. \n–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è –í–∞–º.ü•∞")
        formatted_table = format_responses(user_responses[user_id])
        report_text = f'''–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç {user_name_link}\n{formatted_date}
        {formatted_table}'''

        bot.send_message(daily_chat_id, report_text, parse_mode='HTML')
        user_responses[user_id].clear()
    else:
        bot.send_message(message.chat.id, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç, –ø–∞–≥–∞ –±–∏–µ–µ–Ω –±–æ)')


def format_responses(responses):
    separator = "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"

    formatted_string = f"\n{separator}\n–í—á–µ—Ä–∞:\n    " + "\n    ".join(responses[1].splitlines()) + \
                       f"\n\n{separator}\n–°–µ–≥–æ–¥–Ω—è:\n    " + "\n    ".join(responses[2].splitlines()) + \
                       f"\n\n{separator}\n–°–ª–æ–∂–Ω–æ—Å—Ç–∏:\n    " + "\n    ".join(responses[3].splitlines()) + \
                       f"\n{separator}"
    return formatted_string


@bot.message_handler(commands=['my_id'], chat_types=['private'])
def get_user_id(message):
    bot.reply_to(message, message.from_user.id)


@bot.message_handler(commands=['chat_id'])
def get_chat_id(message):
    bot.reply_to(message, message.chat.id)


def get_questions():
    headers = ['–í–æ–ø—Ä–æ—Å—ã']
    questions = [
        ['1)', '–ß–µ–º –í—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –≤—á–µ—Ä–∞?'],
        ['2)', '–ß–µ–º –±—É–¥–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?'],
        ['3)', '–ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å?']
    ]
    table = tabulate(questions, headers)
    return f'{table}'


if __name__ == "__main__":
    bot.polling()
